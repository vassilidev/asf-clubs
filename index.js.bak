const cliProgress = require('cli-progress');
const {cpus} = require("os");
const {isMaster, fork, on} = require("cluster");
const puppeteer = require("puppeteer");
const {writeFileSync} = require('fs');

if (isMaster) {
    const numCPUs = cpus().length;

    const b1 = new cliProgress.SingleBar({
        format: 'Parsing ASF Clubs {bar} {percentage}% | ETA: {eta}s | {value}/{total}',
        barCompleteChar: '\u2588',
        barIncompleteChar: '\u2591',
    });

    (async () => {
        const browser = await puppeteer.launch({headless: true, ignoreHTTPSErrors: true});
        const page = await browser.newPage();

        await page.goto('https://org.football.ch/fr/notre-profil/clubs/clubs-asf.aspx');

        await page.waitForNetworkIdle();

        let allClubs = await page.evaluate(function () {
            document
                .querySelector("#qc-cmp2-ui > div.qc-cmp2-footer.qc-cmp2-footer-overlay.qc-cmp2-footer-scrolled > div > button.css-11v0p2c > span")
                .click();

            let liElements = document.querySelectorAll('.panel.panel-primary li');

            let dataList = [];

            liElements.forEach(function (li) {
                var aElement = li.querySelector('a');

                dataList.push({
                    href: aElement.getAttribute('href') ?? '',
                    text: aElement.textContent ?? '',
                });
            });

            return dataList;
        });

        b1.start(allClubs.length, 0, {
            speed: "N/A"
        });

        const rowsPerWorker = Math.ceil(allClubs.length / numCPUs);

        const numWorkers = Math.min(numCPUs, Math.ceil(allClubs.length / rowsPerWorker));

        // Split rows into chunks for each worker
        for (let i = 0; i < numWorkers; i++) {
            const start = i * rowsPerWorker;
            const end = (i + 1 === numWorkers) ? allClubs.length : (i + 1) * rowsPerWorker;
            const workerRows = allClubs.slice(start, end);

            fork({workerRows: JSON.stringify(workerRows)});
        }

        let completedWorkers = 0;

        on('message', (worker, message) => {
            if (message.type === 'increment') {
                b1.increment();

                return;
            }

            if (message.type === 'result') {
                allClubs.push(...message.data);
            }

            completedWorkers++;

            if (completedWorkers === numWorkers) {
                b1.stop();

                console.log('All workers have completed, write the final output file')

                writeFileSync(
                    './clubs.json',
                    JSON.stringify(allClubs, null, 2)
                );
            }
        });
    })();
} else {
    (async()=>{
        try {
            const browser = await puppeteer.launch({headless: true, ignoreHTTPSErrors: true});
            const page = await browser.newPage();

            const workerRows = JSON.parse(process.env.workerRows);

            console.log(workerRows)

            let output = [];

            for (let i = 0; i < workerRows.length; i++) {
                let clubToExtract = workerRows[i];

                await page.goto(clubToExtract.href);

                let basicInfo = await page.evaluate(function (clubToExtract) {
                    var div = document.querySelector('.list-group-item');
                    var textDivs = div.querySelectorAll('.col-8, .col-6'); // Selecting divs containing text

                    function extractValue(toExtract) {
                        for (const txtDiv of textDivs) {
                            const dataDivs = txtDiv.querySelectorAll('div');

                            for (const finalDiv of dataDivs) {
                                const textContent = finalDiv.textContent.trim();

                                if (textContent.startsWith(toExtract)) {
                                    if (!textContent.includes(':')) {
                                        return textContent;
                                    }

                                    return textContent.split(':')[1].trim();
                                }
                            }
                        }

                        return null;
                    }

                    let addr = textDivs[0].querySelectorAll('div');

                    return {
                        test: clubToExtract.text,
                        nom_du_club: document.getElementsByClassName('navbar-brand')[0].text,
                        url_site: extractValue('www.'),
                        numero_club: extractValue('N° du club:') ?? extractValue('Vereinsnr.:') ?? extractValue('No società:'), // N° du club: 6137
                        adresse: addr[0].innerText + ', ' + addr[1].innerText,
                        nombre_d_equipe: extractValue('Equipes:') ?? extractValue('Teams:') ?? extractValue('Squadre:'),
                        couleur_maillot: extractValue('Couleurs:') ?? extractValue('Farben:'),
                        region: extractValue('Région:') ?? extractValue('Regione:') ?? extractValue('Region:'),
                        appartenance: extractValue('Appartenance:') ?? extractValue('Appart.:') ?? extractValue('Zugehörigkeit'),
                        logo: document.getElementsByClassName('vereinLogo')[0].src,
                    };
                }, [clubToExtract]);

                await page.goto(clubToExtract.href + 'a=fu');

                let contacts = await page.evaluate(function () {
                    const headings = document.querySelectorAll('.row.heading');
                    const contacts = [];

                    headings.forEach(heading => {
                        const headingText = heading.querySelector('h5 > div').textContent.trim();

                        const ftNameElement = heading.nextElementSibling.querySelector('.ftName');
                        const ftName = ftNameElement ? ftNameElement.textContent.trim() : null;

                        const phoneElements = heading.nextElementSibling.querySelectorAll('a[href^="tel:"]');

                        const phoneNumbers = Array.from(phoneElements).map(phoneElement => phoneElement.textContent.trim()).join(', ');

                        if (headingText && ftName && phoneNumbers.length > 0) {
                            contacts.push({titre: headingText, nom: ftName, telephones: phoneNumbers});
                        }
                    });

                    return contacts;
                });

                let newClub = {
                    ...basicInfo,
                    contacts: contacts,
                };

                output.push(newClub);

                process.send({type: 'increment'});
            }

            process.send({type: 'result', data: output})
        } catch (parseError) {
            console.log('Error parsing rows:'.parseError.message)
        }
    })();
}